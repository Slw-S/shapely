name: Build and publish

on:
  push:
    tags:
      - '*'  # Triggers the workflow on version tags

permissions:
  contents: write
  actions: read

env:
  GEOS_VERSION: "3.13.1"

jobs:
  build_sdist:
    name: Build sdist
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build a source tarball
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine
          python -m build --sdist
          twine check --strict dist/*

      - uses: actions/upload-artifact@v4
        with:
          name: release-sdist
          path: ./dist/*.tar.gz
          retention-days: 30
          compression-level: 0

  build_wheels_linux:
    name: Build ${{ matrix.baseimage }} wheels
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            baseimage: manylinux2014_x86_64
            cibw_build: "*manylinux_x86_64"
            arch: x86_64
          - os: ubuntu-latest
            baseimage: musllinux_1_2_x86_64
            cibw_build: "*musllinux_x86_64"
            arch: x86_64
          - os: ubuntu-24.04-arm
            baseimage: manylinux2014_aarch64
            cibw_build: "*manylinux_aarch64"
            arch: aarch64
          - os: ubuntu-24.04-arm
            baseimage: musllinux_1_2_aarch64
            cibw_build: "*musllinux_aarch64"
            arch: aarch64
    env:
      basetag: 2024.08.12-1

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          buildkitd-flags: --debug

      - name: Build Docker image with GEOS
        # using build-push-action (without push) to make use of cache arguments
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ci/Dockerfile
          platforms: linux/${{ matrix.arch }}
          tags: ${{ matrix.baseimage }}_geos:${{ env.GEOS_VERSION }}
          build-args: |
            BASEIMAGE=quay.io/pypa/${{ matrix.baseimage }}:${{ env.basetag }}
            GEOS_VERSION=${{ env.GEOS_VERSION }}
          push: false
          load: true
          cache-from: type=gha,scope=${{ matrix.baseimage }}
          cache-to: type=gha,mode=max,scope=${{ matrix.baseimage }}
        env:
          BUILDKIT_PROGRESS: plain

      - name: Add GEOS LICENSE
        run: cp ci/wheelbuilder/LICENSE_GEOS .
        shell: bash

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          # TEMP don't use automated/isolated build environment, but manually
          # install build dependencies so we can build with cython 3.1.0a0
          # once Cython has an official release that supports free threading we can remove this
          CIBW_BUILD_FRONTEND: "pip; args: --no-build-isolation"
          CIBW_BEFORE_BUILD: |
            # For free threading support in Cython install a pre-release version of Cython
            python -c "import sysconfig, subprocess; subprocess.check_call(['pip', 'install', '--pre', 'cython'] if sysconfig.get_config_var('Py_GIL_DISABLED') else ['pip', 'install', 'cython'])" &&
            pip install numpy setuptools wheel
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.baseimage }}_geos:${{ env.GEOS_VERSION }}
          CIBW_MUSLLINUX_X86_64_IMAGE: ${{ matrix.baseimage }}_geos:${{ env.GEOS_VERSION }}
          CIBW_MANYLINUX_AARCH64_IMAGE: ${{ matrix.baseimage }}_geos:${{ env.GEOS_VERSION }}
          CIBW_MUSLLINUX_AARCH64_IMAGE: ${{ matrix.baseimage }}_geos:${{ env.GEOS_VERSION }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-linux-${{ matrix.baseimage }}
          path: ./wheelhouse/*.whl
          retention-days: 30
          compression-level: 0

  build_wheels_mac_win:
    name: Build ${{ matrix.arch }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:          
          - os: windows-11-arm
            arch: ARM64
            msvc_arch: ARM64        
          - os: windows-2019
            arch: x86
            msvc_arch: x86
          - os: windows-2019
            arch: AMD64
            msvc_arch: x64
          - os: macos-13
            arch: x86_64
            cmake_osx_architectures: x86_64
          - os: macos-14
            arch: arm64
            cmake_osx_architectures: arm64

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache GEOS build
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/geos-${{ env.GEOS_VERSION }}
          key: ${{ matrix.os }}-${{ matrix.arch }}-${{ env.GEOS_VERSION }}-${{ hashFiles('ci/*') }}

      - name: Add GEOS LICENSE
        run: cp ci/wheelbuilder/LICENSE_GEOS .
        shell: bash

      - name: Add MSVC LICENSE
        run: cp ci/wheelbuilder/LICENSE_win32 .
        shell: bash
        if: ${{ matrix.os == 'windows-2019' }}

      - name: Activate MSVC
        uses: ilammy/msvc-dev-cmd@v1.13.0
        with:
          arch: ${{ matrix.msvc_arch }}
        if: ${{ matrix.msvc_arch }}

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_ENVIRONMENT_MACOS:
            GEOS_INSTALL=${{ runner.temp }}/geos-${{ env.GEOS_VERSION }}
            GEOS_CONFIG=${{ runner.temp }}/geos-${{ env.GEOS_VERSION }}/bin/geos-config
            MACOSX_DEPLOYMENT_TARGET=10.9
            CMAKE_OSX_ARCHITECTURES='${{ matrix.cmake_osx_architectures }}'
            CFLAGS='-Wno-error=incompatible-function-pointer-types'
          CIBW_ENVIRONMENT_WINDOWS:
            GEOS_INSTALL='${{ runner.temp }}\geos-${{ env.GEOS_VERSION }}'
            GEOS_LIBRARY_PATH='${{ runner.temp }}\geos-${{ env.GEOS_VERSION }}\lib'
            GEOS_INCLUDE_PATH='${{ runner.temp }}\geos-${{ env.GEOS_VERSION }}\include'
          CIBW_BEFORE_ALL_MACOS: ./ci/install_geos.sh
          CIBW_BEFORE_ALL_WINDOWS: ci\install_geos.cmd
          # TEMP don't use automated/isolated build environment, but manually
          # install build dependencies so we can build with cython 3.1.0a0
          # once Cython and numpy have official releases that support free threading we can remove this
          CIBW_BUILD_FRONTEND: "pip; args: --no-build-isolation"
          CIBW_BEFORE_BUILD: |
            # For free threading support in Cython install a pre-release version of Cython
            python -c "import sysconfig, subprocess; subprocess.check_call(['pip', 'install', '--pre', 'cython'] if sysconfig.get_config_var('Py_GIL_DISABLED') else ['pip', 'install', 'cython'])" &&
            pip install numpy setuptools wheel
          CIBW_BEFORE_BUILD_WINDOWS:
            # For free threading support in Cython install a pre-release version of Cython
            python -c "import sysconfig, subprocess; subprocess.check_call(['pip', 'install', '--pre', 'cython'] if sysconfig.get_config_var('Py_GIL_DISABLED') else ['pip', 'install', 'cython'])" &&
            pip install numpy setuptools wheel &&
            pip install delvewheel
          CIBW_SKIP: ${{ runner.os == 'Windows' && runner.arch == 'ARM64' && '*cp310*' || '' }}
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: delvewheel repair --add-path ${{ runner.temp }}\geos-${{ env.GEOS_VERSION }}\bin -w {dest_dir} {wheel}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}-${{ matrix.arch }}
          path: ./wheelhouse/*.whl
          retention-days: 5
          compression-level: 0

  publish:
    name: Publish on GitHub
    needs: [build_sdist, build_wheels_mac_win, build_wheels_linux]
    runs-on: ubuntu-latest
    steps:
     
      - name: Checkout code
        uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          pattern: release-*
          merge-multiple: true
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2.2.2
        with:
          files: dist/*
          body: |
            Unofficial release for testing
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
